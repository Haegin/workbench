#!/usr/bin/env ruby
# encoding: UTF-8

# Travis Status Check
# (requires the `travis` gem and a Travis pro account)

require "travis/pro"

unless ENV['TRAVIS_TOKEN'] && ENV['TRAVIS_REPO']
  puts "Failed: please ensure TRAVIS_TOKEN and TRAVIS_REPO env vars are set, e.g."
  puts "  gem install travis"
  puts "  travis login --pro"
  puts "  travis token --pro"
  exit 1
end

config = {
  :tmux_filename => '/var/tmp/tmux-travis-status'
}

def valid_build?(build)
  build.finished? &&
    (build.branch_info =~ /master/) &&
    !build.errored? &&
    !build.pull_request?
end

def parse_build(build)
  if build.failed?
    minutes_ago = ((Time.now.utc - build.finished_at) / 60.0).floor
    { :bg => "160", :fg => "000", :label => "✘ #{minutes_ago}m" }
  elsif build.passed?
    { :bg => "041", :fg => "016", :label => "✔︎" }
  else
    { :bg => "255", :fg => "000", :label => "?" }
  end
end

def update_status(build, config = {})
  state = parse_build(build)

  # write tmux file for segment
  if config[:tmux_filename]
    tmux_output = "#[bg=colour000,fg=colour#{state[:bg]}]⮂#[bg=colour#{state[:bg]},fg=colour#{state[:fg]}] #{state[:label]} #[fg=colour000,bg=colour#{state[:bg]}]⮂#[default]"
    File.open(config[:tmux_filename], 'w') { |f| f.write(tmux_output) }
  end
end

# connect to travis with env credentials
Travis::Pro.access_token = ENV['TRAVIS_TOKEN']
repo = Travis::Pro::Repository.find(ENV['TRAVIS_REPO'])

# show initial build status if present
if build = repo.builds.detect { |build| valid_build?(build) }
  update_status(build, config)
end

# listen for finished build events on the stream
Travis::Pro.listen(repo) do |stream|
  stream.on('build:finished') do |event|
    if valid_build?(event.build)
      update_status(event.build, config)
    end
  end
end
