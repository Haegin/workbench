#!/bin/sh

# Duplicity - GPG signed, encrypted and compressed differential backups
#
# Sensitive ENV vars are extracted from the OSX keychain (man security)
#  - http://duplicity.nongnu.org
#  - http://ss64.com/osx/security.html
#
# Requirements
#   brew install duplicity gpg2
#   and ensure you have a OSX keychain entries for your GPG passphrase and S3
#   credentials e.g. account: $USER service: DUPLICITY_GPG_PASSPHRASE
#   also install MacGPG2 https://gpgtools.org

ulimit -n 1024

# export ENV var from the OSX keychain
#  - args {env var name} {service name} {account name}
function export_osx_keychain_password() {
  export $1=`security 2>&1 > /dev/null find-generic-password -s $2 -a $3 -g | sed 's/.*"\(.*\)"/\1/'`
}

# export ENV vars from keychain for duplicity commands
export_osx_keychain_password "PASSPHRASE" "DUPLICITY_GPG_PASSPHRASE" $USER
export_osx_keychain_password "AWS_SECRET_ACCESS_KEY" "DUPLICITY_AWS_SECRET_ACCESS_KEY" $USER
export_osx_keychain_password "AWS_ACCESS_KEY_ID" "DUPLICITY_AWS_ACCESS_KEY_ID" $USER

# backup target destination
S3_BACKUP_URL="s3://s3-eu-west-1.amazonaws.com/hiddenloop-backups/duplicity/$HOSTNAME"
# use same passphrase for signing
export SIGN_PASSPHRASE=$PASSPHRASE

# folder to backup (or restore)
folder="/Volumes/Monolith/archive/"

# duplicity options
exclude_options="--exclude-filelist /Users/$USER/.duplicity_exclude"
gpg_options="--gpg-binary /usr/local/MacGPG2/bin/gpg2"
s3_options="--s3-use-new-style --s3-european-buckets --s3-use-ia --s3-use-server-side-encryption --allow-source-mismatch"
current_date=`date`

if [ "$1" == "restore" ]; then
  # restore
  echo "Starting Restore - $current_date"

  echo "####### $folder Restore Started ########"
  /usr/local/bin/duplicity $gpg_options $s3_options $S3_BACKUP_URL$folder $folder
  echo
else
  # backup
  echo "Starting Backup - $current_date"

  # skip folder if it does not exist
  if [ -d "$folder" ]; then
    echo

    echo "####### $folder Backup Started ########"
    /usr/local/bin/duplicity $gpg_options $exclude_options $s3_options $folder $S3_BACKUP_URL$folder
    echo

    echo "####### $folder Removing Old Backups ########"
    /usr/local/bin/duplicity $gpg_options remove-older-than 1M --force $S3_BACKUP_URL$folder
    /usr/local/bin/duplicity $gpg_options cleanup --extra-clean --force $S3_BACKUP_URL$folder
    echo
  else
    echo "Ooops $folder does not exist, skipping backup :("
  fi
fi

# clear out sensitive ENV vars
export PASSPHRASE=
export SIGN_PASSPHRASE=
export AWS_ACCESS_KEY_ID=
export AWS_SECRET_ACCESS_KEY=
