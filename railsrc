#!/usr/bin/ruby

# show queries
if defined? ActiveRecord
  ActiveRecord::Base.logger = Logger.new STDOUT
  ActiveRecord::Base.clear_reloadable_connections!
end

# show requests, e.g. use app.get '/'
if defined? ActionController
  ActionController::Base.logger = Logger.new STDOUT
end

# run query
def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

# hirb view for routes
if defined? ActionDispatch
  class Hirb::Helpers::Route < Hirb::Helpers::AutoTable
    def self.render(output, options = {})
      super( output.requirements.map{ |k,v|
        [k, v.inspect]
        }, options.merge({
          :headers     => [output.name || '', "#{ output.verb || 'ANY' } #{ output.path }"],
          :unicode     => true,
          :description => nil,
          }) )
    end
  end

  Hirb.add_view ActionDispatch::Routing::RouteSet, :class => Hirb::Helpers::Route
end

if defined? Rails
  # print a short (or long) route list
  include Rails.application.routes.url_helpers

  def routes(long_output = false)
    if long_output
      Rails.application.routes.routes.each{ |e| puts Hirb::Helpers::Route.render(e)  }
      true
    else
      Hirb::Console.render_output Rails.application.routes.routes.map{|e|
        [e.name || '', e.verb || 'ANY', e.path]
      },{
        :class   => Hirb::Helpers::AutoTable,
        :headers => %w<name verb path>,
      }
    end
  end

  # get a specific route via index or name
  def route(index_or_name)
    route = case index_or_name
    when Integer
      Rails.application.routes.routes[ index_or_name ]
    when Symbol # named route
      Rails.application.routes.named_routes.get index_or_name
    end
  end

end

# show Rails app name and RAILS_ENV name in prompt
app_env  = (ENV['RAILS_ENV'] || Rails.env)[0...3]
app_name = (defined?(Rails) ? Rails.application.class.parent_name : Dir.pwd.split('/').last).downcase
prompt   = "#{ app_name }(#{ app_env })"

# build irb prompt
IRB.conf[:PROMPT] ||= {}
IRB.conf[:PROMPT][:RAILS] = {
  :PROMPT_I    => "#{ prompt }> ",
  :PROMPT_N    => "#{ prompt }| ",
  :PROMPT_C    => "#{ prompt }| ",
  :PROMPT_S    => "#{ prompt }%l ",
  :RETURN      => "=> %s\n",
  :AUTO_INDENT => true,
}
IRB.conf[:PROMPT_MODE] = :RAILS

# turn off Hirb for HouseTrip app
if app_name == 'housetrip'
  Hirb.disable
end
